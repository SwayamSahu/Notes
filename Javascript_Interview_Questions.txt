JavaScript is a lightweight, interpreted, object-oriented scripting language. It allows you to build interactivity into static HTML pages. Netscape, Internet Explorer, and other web browsers include the language's general-purpose core.

1. What are JavaScript Data Types? 
There are three major Data types in JavaScript.

Primitive
Numbers
Strings
Boolean
Symbol

Trivial
Undefined
Null

Composite
Objects
Functions
Arrays

2. What is the use of the isNaN function?
 The number isNan function determines whether the passed value is NaN (Not a number) and is of the type “Number”. In JavaScript, the value NaN is considered a type of number. It returns true if the argument is not a number, else it returns false.

3. Which is faster in JavaScript and ASP script?
 JavaScript is faster compared to ASP Script. JavaScript is a client-side scripting language and does not depend on the server to execute. The ASP script is a server-side scripting language always dependable on the server.

4. What is negative infinity?
 The negative infinity is a constant value represents the lowest available value. It means that no other number is lesser than this value. It can be generate using a self-made function or by an arithmetic operation. JavaScript shows the NEGATIVE_INFINITY value as -Infinity.

5. Is it possible to break JavaScript Code into several lines?
 Yes, it is possible to break the JavaScript code into several lines in a string statement. It can be broken by using the backslash ‘\’. 

6. What are undeclared and undefined variables?
Undefined: It occurs when a variable is declare not not assign any value. Undefined is not a keyword.
Undeclared: It occurs when we try to access any variable which is not initialize or declare earlier using the var or const keyword. If we use ‘typeof’ operator to get the value of an undeclare variable, we will face the runtime error with the return value as “undefined”. The scope of the undeclare variables is always global.

7. What is a prompt box?
 The prompt box is a dialog box with an optional message prompting the user to input some text. It is often used if the user wants to input a value before entering a page. It returns a string containing the text entered by the user, or null.

8. is the ‘this’ keyword in JavaScript?
 Functions in JavaScript are essential objects. Like objects, it can be assign to variables, pass to other functions, and return from functions. And much like objects, they have their own properties. ‘this’ stores the current execution context of the JavaScript program. Thus, when it use inside a function, the value of ‘this’ will change depending on how the function is defined, how it is invoked, and the default execution context.

9. Explain the working of timers in JavaScript. Also elucidate the drawbacks of using the timer, if any.
The timer executes some specific code at a specific time or any small amount of code in repetition to do that you need to use the functions setTimout, setInterval, and clearInterval. If the JavaScript code sets the timer to 2 minutes and when the times are up then the page displays an alert message “times up”. The setTimeout() method calls a function or evaluates an expression after a specified number of milliseconds.

====================================================================================
20-04-2024

The majority of big tech companies utilize JavaScript to build complex and powerful web-based applications. And with the launch of node.js, it has become one of the top languages for building server-side applications. However, the web still needs to be bigger to utilize JavaScript's full potential and flexibility.

Here, we have compiled a list of JavaScript developer interview questions and answers to help you ace your next JavaScript interview and land your desired job. Conversely, if you are an interviewer looking for the best questions to gauge the talented candidate, this can be your reference.

4. When should generators be used in ES6?


Generators in ES6 can be used in two main scenarios:

When one wants to move out of a function, one can do so using generators, and the outer code determines when to move back into the function.

With the help of generators, one can control an asynchronous call outside the code. Most importantly, though, the next value can come in only when needed; all values do not need to come back at once

5. Why are promises used in JavaScript?

 Answer
Promises help in managing asynchronous operations, such as server requests in JavaScript. Earlier, callbacks were used for the same purpose. However, callbacks have limited functionality and, thus, can make the code unmanageable. There are four states of the promise object:

Pending: This is the first state of the promise and shows that the promise has been neither fulfilled nor rejected.

Fulfilled: This state represents the completion of the asynchronous operation. In other words, the promise has been fulfilled.

Rejected: This state represents the failure of the asynchronous operation due to some reason. In other words, the promise has been rejected.

Settled: This is the last state of the promise, showing that the promise has been either fulfilled or rejected.

A promise constructor uses a callback with two parameters - resolve and reject - to create a promise. The resolve function is called when the asynchronous operation has succeeded. The reject function is called when the asynchronous operation has failed.

7. Why are Arrow functions used almost everywhere?

Answer
Arrow functions are used everywhere because:

Safety of scope: When the arrow function is used everywhere, it brings consistency of scope because the same thisObject is used everywhere. If by any chance, a standard function is used alongside the arrow function, there are chances of the scope getting mixed up.
Compactness: As compared to the standard function, the arrow function is compact as it does away with the need for keywords, curly braces, parenthesis, etc. in certain cases. It is, therefore, easier to read and write.
Clarity: When the arrow function is used everywhere, there is a certain consistency of scope. Thus, whenever a standard function is mixed with it, it stands out distinctly. The developer can therefore look for the next higher function to locate the thisObject.

9. Describe Arrow functions.

Answer
The ES6 Javascript version introduced Arrow functions. With the Arrow functions, we can declare functions using new and shorter syntax. These functions can only be used as function expressions. The declaration of these functions is done without using the function keyword. Moreover, if there is a single returning expression, then even the return keyword is not needed. Additionally, wherever the code occurs in a single line only, we can omit the curly {} braces. If there is only one argument in a function, then we can omit even the () parenthesis.

10. What are the main differences between Java and JavaScript?

Answer
Java is a general-purpose programming language that is class-based, whereas JavaScript is an interpreted scripting language. Java is used to create complete applications that may run on a single computer or be distributed among servers and clients in a network. JavaScript is used to create interactive webpages that may respond to user actions.

11. Which company developed JavaScript?

Answer
The language was developed by Brenden Eich in 1995 when he was working as an employee of netscape. He is also the founder of Mozilla foundation.

12. What are classes in Javascript?

Answer
Classes in Javascript are templates for building objects. Classes bind the data with code so that the data works as per the code. They were introduced in the ES6 version of Javascript and while they were created on prototypes, they also have syntax and semantics that are not common with ES5. Classes can be seen as special functions. There are two components of class syntax: class expressions and class declarations.

Class expressions are one of the ways to define classes. They may or may not have names. If a class expression has a name, it is held locally in the class body but can be accessed through the name property. Before using class expressions, one must declare them.

Another way to define classes is class declaration. For declaring a class, the class keyword must be followed by the class name.

One class may use the properties of methods of another class by using the extend keyword. Classes in Javascript must follow the strict mode. If the strict mode is not followed, errors will appear.


13. Explain rest parameter and spread operator.
 Answer
The ES6 version of Javascript introduced the rest parameter and spread operator.

Rest Parameter

The use of three dots (...) before any parameter shows a rest parameter. This improves the handling of function parameters. With the help of the rest parameter, we can create such functions that can take a different number of arguments. By using the rest parameter, all these arguments will be converted into arrays. The rest parameter can also be used to extract any or all parts of an argument.

Spread Operator

Though the spread operator syntax is the same as that of the rest parameter, the spread operators help to spread arrays and object literals. Another use of spread operators is when one or more arguments are expected to be in a given function call. So, while the rest parameter creates an array, a spread operator spreads an array.

14. How can you create objects in JavaScript?

Answer
Because JavaScript is fundamentally an object-oriented scripting language, it encourages and supports using objects when developing web-based applications.

Image 23-03-23 at 9.26 PM_11zon.webp

15. How can you make arrays in JavaScript?

Answer
Here's a simple method to create arrays with JavaScript using the array literal:

Image 23-03-23 at 9.27 PM_11zon-2.webp

16. What is object destructuring?

Answer
Object destructuring is a JavaScript feature to extract object properties and bind these properties to variables. It can be used to extract several properties in a single statement and can reach properties from nested objects. When no property exists, object destructuring can set default values.
