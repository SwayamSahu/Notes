What are Programs?  
Programs are text files that humans write. They tell computers what to do! Very often the text that we write in programs is referred to as code. People who write programs are referred to as programmers or coders. 

Programs are written in a programming language designed to be human-readable. In this way many programmers can work on the same code with a common understanding of what it's trying to accomplish!

When a program is ready to be executed by a machine, it is read line-by-line by a compiler or an interpreter. Both of these tools will translate the code into instructions a machine can run.

Parsing
Each line in a program is parsed to determine its meaning to the machine. This is done by breaking up each statement into tokens. For instance, we might have a statement:

const a = 4
This statement is broken up into the individual tokens: const, a, = and 4.

These tokens have a particular meaning to the machine depending on the syntax. Programming languages define syntax. One such programming language is JavaScript. Using JavaScript syntax, the compiler assigns a set of rules to determine the meaning of the above tokens.

It will see the keyword const and know it to be declaring a variable called a. It will recognize = as an assignment operator. Finally, it will determine that 4 is the value to be stored inside of the variable a.

A compiler will read each statement in your program, parsing it. Eventually it forms a tree-like data structure to represent your program. From this data structure it will create a series of machine instructions that can be executed directly.

In some languages, compilation creates machine code that is deployed to servers. For JavaScript, compilation happens microseconds before execution. This is referred to Just-in-Time Compilation.

Phew! 

Don't worry if some of that was confusing! It's enough to introduce these concepts for now. We'll dive into further detail in future lessons. We will explore JavaScript syntax one step at a time by writing programs in the coming lessons.
--------------------------------------------------------------------------------

Constants are immutable, meaning their value cannot change.

Turns out there are other keywords for declaring variables! Using the keyword let instead of const will allow us to make the value mutable.


==============

A key feature of programming languages is the ability to store some value for later use. We store values in something called a variable. 

What is a function?
A function is re-usable code! With a function you can plug in different inputs and receive outputs based on the input.

===============

Parameters and Arguments

Both of the terms parameter and argument refer to the inputs supplied to a function. Let's take a look at a function that has two inputs:

function addNumbers(a, b) {
    return a + b;
}
In this case, there are two inputs. We can also say there are two parameters: a and b. These are the variables that are defined in the function declaration.

If we were to call this function with two values: 1 and 2:

addNumbers(1, 2);
The values 1 and 2 would be considered arguments. They are the data supplied to the function, which get filled into the parameters.

This a pretty small distinction, so generally you'll hear these terms used interchangeably! The important thing is to know that when someone says parameter or argument they are referring to the function inputs.

Division Operator
This stage we're going to introduce a new operator, the division operator: /.

The divide operator takes two inputs and divides the left-side by the right-side. So 8 / 4 would evaluate to 2.


Math Floor
Now we're going to discuss another useful Math function Math.floor! Unlike Math.random, Math.floor will take an argument:

const two = Math.floor(2.2598223);
This function will take 2.2598223 and return 2. The function will round a number down to the nearest integer. For example if we had the number, 2.9999, the function will round this input down to 2.


CONDITIONALS
1: Is Equal

If Statement
Time to introduce the if statement! 

Use if when you need to branch based on a condition:

if(1 === 1) {
    console.log( "Yup, that's true!" );
}
 Here, 1 === 1 is the condition.

The === operator is commonly referred to as the strict equality operator. It compares two values and evaluates to true if they are equal.

The expression 1 === 1 is always true, so this code will always log "Yup, that's true!".

Is Not Equal
 "Hello? Yes, I'd like an operator!"

Well, you're in luck! 

Our next operator is the !== or the strict inequality operator. This operator will evaluate to true if the two values are not equal.

 There are also loose equality/inequality operators: == and != respectively. We'll discuss these when we dig into types!

Let's check out some examples:

console.log( 1 !== 2 ); // true
console.log( 2 !== 2 ); // false
console.log( 3 !== 2 ); // true
 Notice that 2 !== 2 is the only expression evaluating to false because these two values are equal.

Factorial
In mathematics, a factorial is often denoted with an exclamation mark !. A factorial is the product of all positive integers greater than 0 up to and including the factorial number n.

Let's take a look at a few examples of factorials:

5! = 5 * 4 * 3 * 2 * 1 = 120

3! = 3 * 2 * 1 = 6

2! = 2 * 1 = 2

As you can see above, 5!, pronounced "five factorial", is 5 * 4 * 3 * 2 * 1. The number n, in this case 5, is multiplied by every whole number below it greater than 0, resulting in a product of 120.

Q. Taking in some integer value n, find the factorial for that number and return it.

function factorial(n) {
    product = 1;
    for(let i=1; i<=n; i++){
        product = product * i;
    }
    return product;
}

module.exports = factorial;
==================================

String Loops
So far we have used loops to add and multiply to some total integer value.

However, there are many other uses for loops! Let's think about how we can use them for strings. 

Let's add some exclamation marks to "Hello World"!

let str = "Hello World";
for(let i = 1; i <= 5; i++) {
    str += "!";
}
console.log(str); // Hello World!!!!!
 Use the + operator to add two or more strings together!

In this case above, we are adding an exclamation mark to our str every iteration. We iterate 5 times so we end up with 5 exclamation marks at the end of "Hello World".

Let's create a function scream which will take in a value n and return a string with the letter "a" repeated that many times. For example:
scream(5); // "aaaaa"
scream(10); // "aaaaaaaaaa"
 You can start with an empty string by assigning "" to a variable. let str = "";


function scream(n) {
    let str = "";
    for(let i = 0; i < n; i++){
        str += "a"; 
    }
    return str;
}


 Your Goal: Modulus Scream
Let's modify our function to return a scream alternating between lower and capital case. For example:
console.log( scream(5) ); // aAaAa
console.log( scream(10) ); // aAaAaAaAaA
 We'll need to add a capital "A" and lower-case "a" on alternating iterations. How might we do this with the modulus operator?

function scream(n) {
    let result = "";
    for (let i = 0; i < n; i++) {
        if (i % 2 === 0) {
            result += "a"; // Lowercase "a" for even iterations
        } else {
            result += "A"; // Uppercase "A" for odd iterations
        }
    }
    return result;
}

// Example usage:
console.log(scream(5)); // Output: "aAaAa"
console.log(scream(10)); // Output: "aAaAaAaAaA"


============

Top Double
 OK, this one will be a bit of a tough challenge!

The goal is to double a value until just before it reaches a top.

Let's say our value is 2 and our top is 100. We would double it like so:

2, 4, 8, 16, 32, 64, 128

 We start at 2, double to 4, 8, so on until 128. We recognize 128 is larger than our top 100 so we return 64. This is the top double for 2 before 100.

The expected result for topDouble(2, 100) would be 64.

 Another loop that will be useful for this task is the while loop.

 Your Goal: Complete the Top Double
Using whichever loop you'd like, complete the top double function to find the largest double for the value that is below the top.
 This one is a bit tricky! You might double the value before realizing it is larger than top. You'll need to go back and return the value before that value that exceeds the top.

function topDouble(value, top) {
    let result = value;
    for (let i = 1; result * 2 < top; i++) {
        result *= 2;
    }
    return result;
}

// Example usage:
console.log(topDouble(5, 20)); // Output: 16
console.log(topDouble(10, 50)); // Output: 32


Message Interpolation
Interpolation makes it easy for us create message templates and fill in the values! 

For instance, we could write an email:

const recipient = "Neo";
const sender = "Morpheus";

// we'll interpolate these names 
// into this email message:
const email = `
To ${recipient},

Red pill or blue pill? 

${sender}`;
 Looks like a couple old pals catching up! 

Your goal task in this challenge will be to interpolate a randomly generated name into an existing string.

==============================================
